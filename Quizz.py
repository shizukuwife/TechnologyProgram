import tkinter as tk
from tkinter import messagebox

#‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
questions = [
    {
        "question": "1 + 1 = ?",
        "options": ["1", "2", "3", "11"],
        "answer": "2"
    },
    {
        "question": "‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏≠‡∏∞‡πÑ‡∏£?",
        "options": ["‡πÅ‡∏î‡∏á", "‡∏ü‡πâ‡∏≤", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á"],
        "answer": "‡∏ü‡πâ‡∏≤"
    },
    {
        "question": "‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π‡πÄ‡∏Å‡∏î‡∏ä‡∏∑‡πà‡∏≠?",
        "options": ["‡∏†‡∏±‡∏ó‡∏£‡∏≤‡∏ô‡∏µ ‡πÑ‡∏ä‡∏¢‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì", "‡∏†‡∏±‡∏ó‡∏£‡∏≤‡∏ì‡∏µ ‡πÑ‡∏ä‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì", "‡∏†‡∏±‡∏ó‡∏£‡∏≤‡∏ô‡∏µ ‡πÑ‡∏ä‡∏™‡∏∏‡∏£‡∏£‡∏ì", "‡∏†‡∏±‡∏ó‡∏£‡∏≤‡∏ì‡∏µ ‡πÑ‡∏ä‡∏ç‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì"],
        "answer": "‡∏†‡∏±‡∏ó‡∏£‡∏≤‡∏ô‡∏µ ‡πÑ‡∏ä‡∏¢‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì"
    },
    {
        "question": "4!",
        "options": ["22", "24", "28", "30"],
        "answer": "24"
    },
    {
        "question": "‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏•‡∏á?",
        "options": ["‡∏≠‡∏≤‡∏¢‡∏∏", "‡∏≠‡∏µ‡πÇ‡∏Å‡πâ", "‡∏•‡∏¥‡∏ü‡∏ï‡πå", "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"],
        "answer": "‡∏≠‡∏≤‡∏¢‡∏∏"
    },
    {
        "question": "Sin(30)=x?",
        "options": ["0.707", "0", "0.866", "0.5"],
        "answer": "0.5"
    },
    {
        "question": "Arccot(x)=2/1.732?",
        "options": ["60 ‡∏≠‡∏á‡∏®‡∏≤", "30 ‡∏≠‡∏á‡∏®‡∏≤", "45 ‡∏≠‡∏á‡∏®‡∏≤", "0 ‡∏≠‡∏á‡∏®‡∏≤"],
        "answer": "30 ‡∏≠‡∏á‡∏®‡∏≤"
    },
    {
        "question": "‡πÑ‡∏Å‡πà‡∏Å‡∏±‡∏ö‡πÑ‡∏Ç‡πà‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ô?",
        "options": ["‡πÑ‡∏Å‡πà", "‡πÑ‡∏Ç‡πà", "‡πÑ‡∏î‡πÇ‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ"],
        "answer": "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ"
    },
    {
        "question": "‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£‡πÉ‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÇ‡∏•‡∏Å?",
        "options": ["‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢", "‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£‡πÅ‡∏≠‡∏ï‡πÅ‡∏•‡∏ô‡∏ï‡∏¥‡∏Å", "‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£‡πÅ‡∏õ‡∏ã‡∏¥‡∏ü‡∏¥‡∏Å", "‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏ï‡∏¥‡∏Å"],
        "answer": "‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£‡πÅ‡∏õ‡∏ã‡∏¥‡∏ü‡∏¥‡∏Å"
    },
    {
        "question": "‡∏£‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏Ç‡∏≠‡∏á 144 ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
        "options": ["12", "11", "13", "14"],
        "answer": "12"
    },
]

class QuizApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üß† ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
        self.root.geometry("700x500")
        self.root.configure(bg="#f0f4f7")

        self.current_question = 0
        self.score = 0
        self.selected_option = tk.StringVar()
        self.user_answers = []

        #‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        title = tk.Label(
            root, text="‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ üìù", font=("Helvetica", 26, "bold"),
            bg="#f0f4f7", fg="#2c3e50"
        )
        title.pack(pady=20)

        #‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        self.card = tk.Frame(root, bg="white", bd=2, relief="groove", padx=20, pady=20)
        self.card.pack(pady=10, padx=30, fill="both", expand=True)

        self.question_label = tk.Label(
            self.card, text="", font=("Helvetica", 18, "bold"),
            wraplength=600, bg="white", fg="#34495e", justify="center"
        )
        self.question_label.pack(pady=10)

        self.options_frame = tk.Frame(self.card, bg="white")
        self.options_frame.pack(pady=10)

        self.options = []
        for i in range(4):
            rb = tk.Radiobutton(
                self.options_frame, text="", variable=self.selected_option, value="",
                font=("Helvetica", 14), bg="white", anchor="w", padx=10,
                activebackground="#ecf0f1", selectcolor="#dff9fb"
            )
            rb.pack(fill="x", pady=5)
            self.options.append(rb)

        #‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á
        self.submit_btn = tk.Button(
            root, text="‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", font=("Helvetica", 14, "bold"),
            bg="#27ae60", fg="white", padx=20, pady=10, command=self.submit_answer
        )
        self.submit_btn.pack(pady=20)

        self.show_question()

    def show_question(self):
        q = questions[self.current_question]
        self.question_label.config(text=f"‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {self.current_question + 1}: {q['question']}")
        self.selected_option.set(None)
        for i, option in enumerate(q["options"]):
            self.options[i].config(text=option, value=option)

    def submit_answer(self):
        selected = self.selected_option.get()
        if not selected:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á")
            return

        q = questions[self.current_question]
        correct = q["answer"]
        self.user_answers.append({
            "question": q["question"],
            "selected": selected,
            "correct": correct,
            "is_correct": selected == correct
        })

        if selected == correct:
            self.score += 1

        self.current_question += 1
        if self.current_question == len(questions):
            self.show_summary()
        else:
            self.show_question()

    def show_summary(self):
        summary_window = tk.Toplevel(self.root)
        summary_window.title("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•")
        summary_window.geometry("650x600")
        summary_window.configure(bg="#fefefe")

        tk.Label(summary_window, text=f"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ {self.score} ‡∏à‡∏≤‡∏Å {len(questions)} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
                 font=("Helvetica", 18, "bold"), fg="#2980b9", bg="#fefefe").pack(pady=15)

        canvas = tk.Canvas(summary_window, bg="#fefefe", highlightthickness=0)
        scrollbar = tk.Scrollbar(summary_window, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#fefefe")

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        for i, answer in enumerate(self.user_answers, start=1):
            result = "‚úÖ ‡∏ñ‡∏π‡∏Å" if answer["is_correct"] else "‚ùå ‡∏ú‡∏¥‡∏î"
            color = "green" if answer["is_correct"] else "red"
            summary_text = (
                f"‡∏Ç‡πâ‡∏≠ {i}: {answer['question']}\n"
                f"‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {answer['selected']}\n"
                f"‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {answer['correct']}\n"
                f"‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result}"
            )
            tk.Label(scrollable_frame, text=summary_text, justify="left",
                     fg=color, wraplength=580, anchor="w", bg="#fefefe",
                     font=("Helvetica", 12)).pack(pady=10, anchor="w")

        tk.Button(summary_window, text="‡∏õ‡∏¥‡∏î", command=self.root.destroy,
                  font=("Helvetica", 12), bg="#c0392b", fg="white", padx=15, pady=5).pack(pady=15)

if __name__ == "__main__":
    root = tk.Tk()
    app = QuizApp(root)
    root.mainloop()
